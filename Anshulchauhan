class Solution {
    public String longestDiverseString(int a, int b, int c) {
        StringBuilder sb = new StringBuilder();
        int size = a + b + c;
        int A = 0, B = 0, C = 0;
        for(int i = 0; i < size; i++) {
            if ((a >= b && a >= c && A != 2) || (B == 2 && a > 0) || (C == 2 && a > 0))  {
                sb.append("a");
                a--;
                A++;
                B = 0;
                C = 0;  
            } else if ((b >= a && b >= c && B != 2) || (A == 2 && b > 0) || (C == 2 && b > 0)) {
                sb.append("b");
                b--;
                B++;
                A = 0;
                C = 0;
            } else if ((c >= a && c >= b && C != 2) || (B == 2 && c > 0) || (A == 2 && c > 0)) {
                sb.append("c");
                c--;
                C++;
                A = 0;
                B = 0;  
            }
        }
        return sb.toString();
    }
}




class Solution 
{
    public int numSteps(String s) 
    {
        char[] array = s.toCharArray();
        
        
           int count = 0;
           int r = 0;
           int r_index = array.length-1;
           
           for(;r_index>0;){
               if(array[r_index] == '1'){
                     while(r_index>=0 && array[r_index] == '1'){
                         array[r_index] = '0';
                         r_index--;
                         
                     }
                     if(r_index>=0){
                         array[r_index] = '1';
                     }
                     count++;
               }else{
                   r_index--;
               }
           }
        
           count += array.length - (r_index+1);
        
           return count;
    }
}
